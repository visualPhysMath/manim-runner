name: Run Manim (by file)

on:
  workflow_dispatch:
    inputs:
      filepath:
        description: "Path to Python scene file in repo (e.g., scenes/hello.py)"
        required: true
        default: "scenes/hello.py"
      scene:
        description: "Scene class name (leave blank to auto-detect; fallback=MainScene)"
        required: false
        default: ""
      quality:
        description: "Quality (-ql/-qm/-qh/-qk)"
        required: false
        default: "-qm"
      resolution:
        description: "Resolution WxH (e.g., 1920x1080)"
        required: false
        default: "1280x720"
      outfile:
        description: "Output file base name (no extension)"
        required: false
        default: "result"

jobs:
  render:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Show Docker diagnostics
        shell: bash
        run: |
          docker --version
          docker info || true

      - name: Validate inputs and file existence
        id: validate
        shell: bash
        run: |
          set -e
          FP="${{ github.event.inputs.filepath }}"
          if [ -z "$FP" ]; then
            echo "❌ filepath is empty"; exit 2
          fi
          if [ ! -f "$FP" ]; then
            echo "❌ File not found: $FP"; ls -R; exit 3
          fi
          if [ ! -s "$FP" ]; then
            echo "❌ File is empty: $FP"; exit 4
          fi
          echo "filepath=$FP" >> "$GITHUB_OUTPUT"
          echo "✅ Found file: $FP"

      - name: Auto-detect scene name (if blank)
        id: detect
        shell: bash
        run: |
          set -e
          SCN_IN="${{ github.event.inputs.scene }}"
          FP="${{ steps.validate.outputs.filepath }}"

          if [ -n "$SCN_IN" ]; then
            SCN="$SCN_IN"
          else
            # class Xxx(Scene|ThreeDScene) から最初のXxxを抽出
            SCN=$(grep -Eo 'class[[:space:]]+[A-Za-z0-9_]+[[:space:]]*\((Scene|ThreeDScene)\)' "$FP" \
                  | head -n 1 \
                  | sed -E 's/class[[:space:]]+([A-Za-z0-9_]+).*/\1/')
            if [ -z "$SCN" ]; then
              SCN="MainScene"
              echo "ℹ️  Scene not found; fallback to MainScene"
            fi
          fi

          echo "scene=$SCN" >> "$GITHUB_OUTPUT"
          echo "✅ Use Scene: $SCN"

      - name: Syntax check (py_compile)
        shell: bash
        run: |
          set -e
          FP="${{ steps.validate.outputs.filepath }}"
          python3 -m py_compile "$FP"
          echo "✅ Syntax OK for $FP"

      - name: Pull official Manim image (Docker Hub)
        shell: bash
        run: |
          docker pull manimcommunity/manim:stable

      - name: Run Manim (Cairo)
        shell: bash
        run: |
          set -e
          FP="${{ steps.validate.outputs.filepath }}"
          SCN="${{ steps.detect.outputs.scene }}"
          Q="${{ github.event.inputs.quality }}"
          RES="${{ github.event.inputs.resolution }}"
          OUT="${{ github.event.inputs.outfile }}"
          if ! echo "$RES" | grep -Eq '^[0-9]+x[0-9]+$'; then
            echo "❌ Invalid resolution format: $RES (expected WxH)"; exit 5
          fi
          IFS="x" read -r W H <<<"$RES"

          UIDGID="$(id -u):$(id -g)"

          docker run --rm --network none --pids-limit=256 -m 2g \
            -u "$UIDGID" \
            -v "$PWD":/work -w /work \
            manimcommunity/manim:stable \
            bash -lc "python -m manim ${Q} --renderer=cairo -r ${W},${H} \"$FP\" \"$SCN\" -o \"${OUT}.mp4\""

          echo "---- Generated files (media/) preview ----"
          find media -type f -name '*.mp4' | sed -n '1,10p' || true


      - name: Collect MP4 and upload artifact
        shell: bash
        run: |
          set -e
          OUT="${{ github.event.inputs.outfile }}"
          mkdir -p outputs
          MP4=$(find media -name '*.mp4' | head -n 1)
          if [ -z "$MP4" ]; then
            echo "❌ No MP4 found under media/"; find media -maxdepth 3 -type f | sed -n '1,50p'; exit 6
          fi
          cp "$MP4" "outputs/${OUT}.mp4"
          echo "✅ Saved outputs/${OUT}.mp4"

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: manim-video
          path: outputs/*.mp4
          retention-days: 30

name: Run Manim (paste code)

on:
  workflow_dispatch:
    inputs:
      code:
        description: "Paste your Manim code (Python) — 改行が消える場合は \\n を使ってもOK"
        required: true
      scene:
        description: "Scene name (auto-detect if blank)"
        required: false
        default: ""
      quality:
        description: "Quality (-ql/-qm/-qh/-qk)"
        required: false
        default: "-qm"
      resolution:
        description: "Resolution WxH (e.g., 1920x1080)"
        required: false
        default: "1920x1080"
      outfile:
        description: "Output base name (no extension)"
        required: false
        default: "result"

jobs:
  render:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4

      - name: Docker diagnostics
        shell: bash
        run: |
          docker --version
          docker info || true

      # ★ 改行復元つきで scene.py を生成
      - name: Write scene.py from input (newline-safe)
        shell: bash
        env:
          CODE: ${{ github.event.inputs.code }}
        run: |
          python - <<'PY'
import os, re, sys
code = os.environ.get("CODE","")

# 1) もし全体が一行 or \n を含むなら、\n を実際の改行に展開
looks_single_line = ("\n" not in code) and ("\\n" in code or " class " in code)
if "\\n" in code or looks_single_line:
    code = code.replace("\\r\\n","\n").replace("\\n","\n")

# 2) 先頭や末尾の意図しない全角/スマート引用符などはそのまま保存（壊さない）
open("scene.py","w",encoding="utf-8").write(code)

# ダイジェスト出力
lines = code.splitlines()
preview = "\n".join(lines[: min(50, len(lines))])
print("---- scene.py (first lines) ----")
print(preview)
print("---- end preview ----")
PY

      - name: Detect scene name if empty
        id: detect
        shell: bash
        run: |
          SCN="${{ github.event.inputs.scene }}"
          if [ -z "$SCN" ]; then
            SCN=$(grep -Eo 'class[[:space:]]+[A-Za-z0-9_]+[[:space:]]*\((Scene|ThreeDScene)\)' scene.py \
              | head -n 1 | sed -E 's/class[[:space:]]+([A-Za-z0-9_]+).*/\1/')
            [ -z "$SCN" ] && SCN=MainScene
          fi
          echo "scene=$SCN" >> "$GITHUB_OUTPUT"
          echo "Use Scene: $SCN"

      # ★ Python文法チェック（ここで落ちれば原因がすぐわかる）
      - name: Syntax check
        shell: bash
        run: |
          python -m py_compile scene.py
          echo "Syntax OK."

      - name: Pre-pull official image (Docker Hub)
        shell: bash
        run: |
          docker pull manimcommunity/manim:stable

      - name: Run Manim (Cairo)
        shell: bash
        run: |
          set -e
          IFS="x" read -r W H <<<'${{ github.event.inputs.resolution }}'
          docker run --rm --network none --cap-drop=ALL --pids-limit=256 -m 2g \
            -v "$PWD":/work -w /work \
            manimcommunity/manim:stable \
            bash -lc "python -m manim ${{ github.event.inputs.quality }} --renderer=cairo -r ${W},${H} scene.py ${{ steps.detect.outputs.scene }} -o ${{ github.event.inputs.outfile }}.mp4"
          echo "Outputs in media/:"
          find media -type f -name '*.mp4' | sed -n '1,10p'

      - name: Collect MP4
        shell: bash
        run: |
          mkdir -p outputs
          MP4=$(find media -name '*.mp4' | head -n 1)
          if [ -z "$MP4" ]; then
            echo "No MP4 found"; exit 1
          fi
          cp "$MP4" "outputs/${{ github.event.inputs.outfile }}.mp4"

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: manim-video
          path: outputs/*.mp4
          retention-days: 30
